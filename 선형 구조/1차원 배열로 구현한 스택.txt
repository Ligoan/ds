/* 1차원 배열로 구현한 스택 */


#define _CRT_SECURE_NO_WARNINGS			// 헤더파일 선언보다 앞서 선언해야 한다.
#define STACK_SIZE		10				// 스택의 크기 10을 'STACK_SIZE'로 표현.
#define BOTTOM			-1				// 스택의 막혀 있는 한쪽 끝을 'BOTTOM'으로 표현

#include <stdio.h>
#include <stdbool.h>


typedef int ELEMENT;	/* 스택 요소의 자료형을 정수형으로. */
typedef enum {
	PUSH    = 0,			// 삽입: 0.
	POP     = 1,			// 삭제: 1.
	PEEK    = 2,			// 조회: 2.
	DISPLAY = 3				// 상태 표시: 3.
} OPERATION;
typedef struct {		/* 스택 자료형 정의 */
	ELEMENT data[STACK_SIZE];
	int top;				// top 위치
} STACK;		


void init(STACK*);			// 스택 초기화.
void push(STACK*, int);		// 삽입.
ELEMENT pop(STACK*);		// 자료 반환 및 삭제.
ELEMENT peek(STACK*);		// 최근 자료 반환.
bool is_full(STACK*);		// 스택 포화 확인.
bool is_empty(STACK*);		// 스택 공백 확인.
void disp(STACK*);			// 스택 상태 표시.


int main(void)
{
	STACK stack;			// 스택 생성.
	OPERATION op;			// 스택 연산 지정 변수.
	int item;				// 자료.

	init(&stack);			// 스택 초기화.
	
	/* 스택 조작 */
	while (true) {
		printf("연산을 지정하시오. (삽입: 0 , 자료 반환 및 삭제: 1, 최근 자료 반환: 2, 상태 표시: 3): ");
		scanf("%d", &op);

		switch (op) {
			case PUSH:		// 자료 삽입.
				printf("삽입 자료: "); scanf("%d", &item); push(&stack, item);
				continue;
			case POP:		// 자료 반환 및 삭제.
				printf("반환 값: %d\n", pop(&stack));
				continue;
			case PEEK:		// 자료 반환.
				printf("반환 값: %d\n", peek(&stack));
				continue;
			case DISPLAY: disp(&stack);
				continue;
			default: return;
		}
	}

	return 0;
}

void init(STACK* s) {
	s->top = -1;
}

void push(STACK* s, int item) {
	if (is_full(s)) {					// 스택 overflow 예외 처리.
		printf("\nStack is full.\n\n");
		return;
	}
	else {
		s->top++;						// 스택에 여유가 있다면 top 위치를 조정 후 item 삽입.
		s->data[s->top] = item;
	}
}

ELEMENT pop(STACK* s) {
	if (is_empty(s)) {					// 스택 underflow 예외 처리.
		printf("\nStack is empty.\n\n");
		return;
	}
	else
		return s->data[(s->top)--];		// top 위치에 있는 item을 반환하고 top 위치를 한 단계 감소.
}

ELEMENT peek(STACK* s) {
	if (is_empty(s)) {					// 스택 underflow 예외 처리.
		printf("\nStack is empty.\n\n");
		return;
	}
	else
		return s->data[s->top];			// top 위치에 있는 item을 반환.
}

bool is_full(STACK* s) {				// 스택 포화 확인.
	if (s->top >= STACK_SIZE - 1)
		return true;
	else
		return false;
}

bool is_empty(STACK* s) {				// 스택 공백 확인.
	if (s->top == -1)
		return true;
	else
		return false;
}

/*  	         스택 상태 표시
 * 
 *	 Top ->	[6] ******* 6 *******
 *			[5] ******* 5 *******
 *			[4] ******* 4 *******
 *			[3] ******* 3 *******
 *			[2] ******* 2 *******
 *			[1] ******* 1 *******
 *			[0] ******* 0 *******
 *	 Bottom -->	*****************
*/
void disp(STACK* s) {
	int i;

	for (i = s->top; i > BOTTOM; i--)
		if (i == s->top)
			printf("\nTop -> [%d] ******* %d *******\n", i, s->data[i]);
		else
			printf("       [%d] ******* %d *******\n", i, s->data[i]);

	printf("Bottom --> *****************\n");
}